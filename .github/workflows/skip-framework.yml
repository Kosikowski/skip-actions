# This workflow is meant to be called remotely from a Skip framework project.
#
# The action will build and test both the Swift and Gradle projects 
# transpiled through Skip.
#
# When tagged with a semantic version (e.g., "1.2.3"), the action will
# create and distribute release .aar and .jar artifacts from the project.
#
# An example invocation script is as follows, which runs for 
# every push, every PR, every semver tag, and every day at noon GMT:
#
# name: skipapp
# on:
#   push:
#     branches: '*'
#     tags: "[0-9]+.[0-9]+.[0-9]+"
#   schedule:
#     - cron: '0 12 * * *'
#   workflow_dispatch:
#   pull_request:
# 
# permissions:
#   contents: write
# 
# jobs:
#   call-workflow:
#     uses: skiptools/actions/.github/workflows/skip-framework.yml@main
# 
name: "Skip Framework CI"
on:
  workflow_call:
    inputs:
      brew-install:
        required: false
        type: string

jobs:
  skip-framework:
    runs-on: macos-13
    # needs hypervisor support (https://github.com/ReactiveCircus/android-emulator-runner/issues/350)
    #runs-on: macos-14

    timeout-minutes: 60
    env:     
      # needs macos-14
      #DEVELOPER_DIR: /Applications/Xcode_15.3.app/Contents/Developer
      DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
    steps:
      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: current
          generate-job-summary: false

      - run: brew install skiptools/skip/skip tree ${{ inputs.brew-install }}

      - uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'

      - run: java -version

      - run: skip doctor

      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Verify Skip Framework
        run: skip verify

      - name: Test macOS & Robolectric (local)
        run: skip test --verbose

      - name: Export project
        run: skip export -v --summary-file=$GITHUB_STEP_SUMMARY

      - name: Test iOS (connected)
        run: |
          # run the tests against the first listed scheme, which for a
          # single-module package will just be "project-name",
          # and for a multi-module package will be "project-name-Package"
          # We also need to reverse sort so we will get "project-name-Package"
          # before some other module that might come earlier (like "Auth")
          SKIP_TEST_MODULE=$(xcodebuild -list -json | jq -r '.workspace.schemes | sort_by(.) | reverse | .[0]')
          echo "Testing Skip module: ${SKIP_TEST_MODULE} from schemes list: $(xcodebuild -list -json | jq -r '.workspace.schemes[]')"
          SKIP_ZERO=1 xcodebuild test -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 15" -skipPackagePluginValidation -configuration debug -scheme ${SKIP_TEST_MODULE}

      - name: Prepare Android emulator
        run: |
          PACKAGE=$(swift package dump-package | jq -r '.name')
          MODULE=$(swift package dump-package | jq -r '.targets[] | select(.type == "test") | .name' | head -n 1)

          cd .build/
          ln -vs plugins/outputs/${PACKAGE}/${MODULE}/skipstone android-tests
          cd android-tests/
          # ensure we can write to the foldr
          chmod -Rf +w .
          # create the "gradlew" wrapper if it does not already exist
          gradle wrapper

      - name: Cache Android emulator snapshot
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30-aosp-atd

      - name: Generate Android emulator snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          working-directory: .build/android-tests
          target: aosp_atd
          api-level: 30
          arch: x86
          channel: canary
          profile: pixel
          avd-name: Pixel_3a_API_30
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching"


      - name: Test Android (connected)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          working-directory: .build/android-tests
          target: aosp_atd
          api-level: 30
          arch: x86
          channel: canary
          profile: pixel
          #profile: Galaxy Nexus
          avd-name: Pixel_3a_API_30
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: adb logcat *:S TestRunner:V & ./gradlew connectedCheck --stacktrace

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # extract package and initial module name from Package.swift
          PACKAGE=$(swift package dump-package | jq -r '.name')
          test -n "${PACKAGE}"
          MODULE=$(swift package dump-package | jq -r '.targets[0].name')
          test -n "${MODULE}"
          COMMIT_DATE=$(git log -1 --format=%ad --date=iso-strict ${GITHUB_REF#refs/*/})
          test -n "${COMMIT_DATE}"

          # the tag is the most recent GitHub ref
          TAG="${GITHUB_REF#refs/*/}"
          test -n "${TAG}"

          gradle assemble --project-dir .build/plugins/outputs/${PACKAGE}/${MODULE}Tests/skipstone -PbuildDir=.build/${MODULE}

          echo "Creating release: ${TAG}"
          mkdir -p Skip/build/artifacts/
          PKGDIR="../../../../../../Skip/build/artifacts/"

          tree ./.build/plugins/outputs/

          # create the release .aar
          cd ./.build/plugins/outputs/${PACKAGE}/${MODULE}Tests/skipstone
          cp -a ${MODULE}/.build/${MODULE}/outputs/aar/${MODULE}-release.aar ${PKGDIR}/${PACKAGE}-${TAG}.aar
          # copy the license for the source jar
          cp ../../../../../../LICENSE* .

          # create a source .jar distribution with consistent timestamps
          find . -exec touch -d "${COMMIT_DATE:0:19}" {} \;

          zip -r ${PKGDIR}/${PACKAGE}-${TAG}-sources.jar . -x '.*' -x 'build/*' -x '*/build' -x '*/build/*' -x '.*/*' -x '*/.*/*'

          # create a release with the assets and a checksums.txt file
          cd ${PKGDIR}
          shasum -a 256 *.* > checksums.txt
          gh release create "${TAG}" -t "Release ${TAG}" --generate-notes *.*
          #echo 'Release artifact SHA-256 hashes:' >> .relnotes
          #echo '```' >> .relnotes
          #cat checksums.txt >> .relnotes
          #echo '```' >> .relnotes
          #gh release create "${TAG}" -t "Release ${TAG}" -F .relnotes *.*

