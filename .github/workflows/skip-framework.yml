# This workflow is meant to be called remotely from a Skip framework project.
#
# The action will build and test both the Swift and Gradle projects 
# transpiled through Skip.
#
# When tagged with a semantic version (e.g., "1.2.3"), the action will
# create and distribute release .aar and .jar artifacts from the project.
#
# An example invocation script is as follows, which runs for 
# every push, every PR, every semver tag, and every day at noon GMT:
#
# name: skipapp
# on:
#   push:
#     branches: '*'
#     tags: "[0-9]+.[0-9]+.[0-9]+"
#   schedule:
#     - cron: '0 12 * * *'
#   workflow_dispatch:
#   pull_request:
# 
# permissions:
#   contents: write
# 
# jobs:
#   call-workflow:
#     uses: skiptools/actions/.github/workflows/skip-framework.yml@main
# 
name: "Skip Framework CI"
on:
  workflow_call:
    inputs:
      # only macos-13 has hypervisor support for the Android emulator
      # https://github.com/ReactiveCircus/android-emulator-runner/issues/350
      runs-on:
        required: false
        type: string
        default: "['macos-13']"
      brew-install:
        required: false
        type: string
      run-local-tests:
        required: false
        type: boolean
        default: true
      run-ios-tests:
        required: false
        type: boolean
        default: true
      run-android-tests:
        required: false
        type: boolean
        default: true

jobs:
  skip-framework:
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.runs-on) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    steps:
      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: homebrew-packages

      - name: Install Skip
        run: brew install skiptools/skip/skip tree ${{ inputs.brew-install }}

      - run: skip doctor

      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup
        id: setup
        run: |
          # convert "refs/tags/1.0.0" to "1.0.0"
          # and "refs/heads/main" to "main"
          TAG=${GITHUB_REF#refs/*/}
          # the version if it matches the semantic tag pattern, otherwise "dev"
          echo "RELTAG=${TAG:-'dev'}" >> $GITHUB_ENV
          # the emulator we use should match the host architecture
          echo "android-arch=$(uname -m | sed 's/arm64/arm64-v8a/')" >> $GITHUB_OUTPUT
          # disable user confirmation to process macros
          defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
          # check whether we use skip-bridge and so need the Android toolchain 
          swift package resolve
          test -d Sources/SkipBridge || jq -e '.pins | any(.identity == "skip-bridge")' Package.resolved >> /dev/null && echo "native-toolchain=required" >> $GITHUB_OUTPUT || echo "Swift Android toolchain not required"

      - name: Install Swift Android Toolchain
        if: ${{ steps.setup.outputs.native-toolchain == 'required' }}
        run: |
          skip android sdk install --verbose
          #brew install skiptools/skip/swift-android-toolchain@6.0

      - name: Verify Skip Framework
        run: skip verify

      - name: Export project
        run: skip export -v -d skip-export --show-tree --sdk-path=legacy --summary-file=$GITHUB_STEP_SUMMARY

      - name: Clean Build
        # workaround for Swift 5.9 error: "error: invalid tool type in 'tools' map" (https://github.com/swiftlang/swift-package-manager/issues/6755)
        run: rm -rf .build

      - name: Test macOS & Robolectric (local)
        if: ${{ inputs.run-local-tests == true && !startsWith(github.ref, 'refs/tags/') }}
        run: skip test --verbose

      - name: Test iOS (connected)
        if: ${{ inputs.run-ios-tests == true && !startsWith(github.ref, 'refs/tags/') }}
        run: |
          # run the tests against the first listed scheme, which for a
          # single-module package will just be "project-name",
          # and for a multi-module package will be "project-name-Package"
          # We also need to reverse sort so we will get "project-name-Package"
          # before some other module that might come earlier (like "Auth")
          SKIP_TEST_MODULE=$(xcodebuild -list -json | jq -r '.workspace.schemes | sort_by(.) | reverse | .[0]')
          echo "Testing Skip module: ${SKIP_TEST_MODULE} from schemes list: $(xcodebuild -list -json | jq -r '.workspace.schemes[]')"
          SKIP_ZERO=1 xcodebuild test -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 15" -skipMacroValidation -skipPackagePluginValidation -configuration debug -scheme ${SKIP_TEST_MODULE}

      - name: Prepare Android emulator
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          PACKAGE=$(swift package dump-package | jq -r '.name')
          MODULE=$(swift package dump-package | jq -r '.targets[] | select(.type == "test") | .name' | head -n 1)

          cd .build/
          ln -vs plugins/outputs/${PACKAGE}/${MODULE}/skipstone android-tests
          cd android-tests/
          # ensure we can write to the foldr
          chmod -Rf +w .
          # create the "gradlew" wrapper if it does not already exist
          gradle wrapper

      - name: Cache Android emulator snapshot
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30-aosp-atd-${{ steps.setup.outputs.android-arch }}

      - name: Generate Android emulator snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          working-directory: .build/android-tests
          target: aosp_atd
          api-level: 30
          arch: ${{ steps.setup.outputs.android-arch }}
          channel: canary
          profile: pixel
          avd-name: Pixel_3a_API_30
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching"


      - name: Test Android (connected)
        if: ${{ inputs.run-android-tests == true && !startsWith(github.ref, 'refs/tags/') && steps.setup.outputs.android-arch == 'x86_64' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          working-directory: .build/android-tests
          target: aosp_atd
          api-level: 30
          arch: ${{ steps.setup.outputs.android-arch }}
          channel: canary
          profile: pixel
          #profile: Galaxy Nexus
          avd-name: Pixel_3a_API_30
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: adb logcat *:S TestRunner:V & ./gradlew connectedCheck --stacktrace

      - name: "Release"
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-13' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create "${RELTAG}" -t "Release ${RELTAG}" --generate-notes skip-export/*.*

